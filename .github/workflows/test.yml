name: Test

on:
  push:
    branches: ["main"]
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always

jobs:
  build-test:
    name: Build & Test

    runs-on: ${{ matrix.os }}

    timeout-minutes: 10

    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
        target:
          - { target: x86_64-unknown-linux-gnu, web: false }
          - { target: wasm32-unknown-unknown, web: true }
        rust:
          - { version: stable }
        include:
          - os: ubuntu-latest
            rust: {
              version: nightly,
              component: --component rust-src,
              flags: "-Ctarget-feature=+atomics,+bulk-memory",
              args: "-Zbuild-std=panic_abort,std",
              docargs: "-Zdoctest-xcompile",
            }
            target: { target: wasm32-unknown-unknown, web: true }
          - os: macos-latest
            rust: {
              version: nightly,
              component: --component rust-src,
              flags: "-Ctarget-feature=+atomics,+bulk-memory",
              args: "-Zbuild-std=panic_abort,std",
              docargs: "-Zdoctest-xcompile",
            }
            target: { target: wasm32-unknown-unknown, web: true }

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: taiki-e/cache-cargo-install-action@v1
        with:
          tool: wasm-bindgen-cli
          git: https://github.com/daxpedda/wasm-bindgen
          rev: f9093e6cb4211470648044b14183a57c639ea3cf
      - name: Install Rust
        run: |
          rustup toolchain install ${{ matrix.rust.version }} --profile minimal ${{ matrix.rust.component }} --target ${{ matrix.target.target }}
          rustup default ${{ matrix.rust.version }}
      - name: Build
        if: matrix.os == 'ubuntu-latest'
        env:
          RUSTFLAGS: ${{ matrix.rust.flags }}
        run: cargo build --target ${{ matrix.target.target }} ${{ matrix.rust.args }}
      - name: Documentation
        if: matrix.os == 'ubuntu-latest'
        env:
          RUSTDOCFLAGS: ${{ matrix.rust.flags }}
          RUSTFLAGS: ${{ matrix.rust.flags }}
        run: cargo doc --no-deps --target ${{ matrix.target.target }} ${{ matrix.rust.args }} ${{ matrix.rust.docargs }}
      - name: Test
        if: matrix.target.web == false
        run: cargo test --all-targets --no-fail-fast
      - name: Test on Chrome
        if: matrix.target.web == true && matrix.os == 'ubuntu-latest'
        env:
          CHROMEDRIVER: chromedriver
          RUSTFLAGS: --cfg=unsupported_spawn_then_wait ${{ matrix.rust.flags }}
        run: cargo test --all-targets --no-fail-fast --target ${{ matrix.target.target }} ${{ matrix.rust.args }}
      - name: Test on Firefox
        if: matrix.target.web == true && matrix.os == 'ubuntu-latest'
        env:
          GECKODRIVER: geckodriver
          RUSTFLAGS: --cfg=unsupported_service --cfg=unsupported_shared_wait ${{ matrix.rust.flags }}
        run: cargo test --all-targets --no-fail-fast --target ${{ matrix.target.target }} ${{ matrix.rust.args }}
      - name: Test on Safari
        if: matrix.target.web == true && matrix.os == 'macos-latest'
        env:
          SAFARIDRIVER: safaridriver
          RUSTFLAGS: --cfg=unsupported_spawn_then_wait --cfg=unsupported_shared_wait ${{ matrix.rust.flags }}
        run: cargo test --all-targets --no-fail-fast --target ${{ matrix.target.target }} ${{ matrix.rust.args }}
      - name: Documentation Test
        if: matrix.target.web == false
        env:
          RUSTFLAGS: ${{ matrix.rust.flags }}
        run: cargo test --doc --no-fail-fast --target ${{ matrix.target.target }} ${{ matrix.rust.args }}

  minimal-versions:
    name: Minimal Versions

    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: minimal-versions

    strategy:
      fail-fast: false
      matrix:
        rust:
          - { version: "1.70" }
          - { version: stable }
        target:
          - x86_64-unknown-linux-gnu
          - wasm32-unknown-unknown
        include:
          - rust: {
              version: nightly,
              component: --component rust-src,
              flags: "-Ctarget-feature=+atomics,+bulk-memory",
              args: "-Zbuild-std=panic_abort,std",
            }
            target: wasm32-unknown-unknown

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Rust
        run: |
          rustup toolchain install ${{ matrix.rust.version }} --profile minimal ${{ matrix.rust.component }} --target ${{ matrix.target }}
          rustup default ${{ matrix.rust.version }}
      - name: Install Rust nightly
        run: rustup toolchain install nightly --profile minimal
      - name: Update to minimal versions
        run: cargo +nightly update -Z minimal-versions
      - name: Fix nightly
        if: matrix.rust.version == 'nightly'
        run: cargo update -p proc-macro2 --precise 1.0.60
      - name: Build
        env:
          RUSTFLAGS: ${{ matrix.rust.flags }}
        run: cargo build --target ${{ matrix.target }} ${{ matrix.rust.args }}
