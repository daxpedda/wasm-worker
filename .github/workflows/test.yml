name: Test

on:
  push:
    branches: ["main"]
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always

jobs:
  build-test:
    name: ${{ matrix.target.description }} ${{ matrix.rust.description }}

    runs-on: ubuntu-latest

    timeout-minutes: 10

    strategy:
      fail-fast: false
      matrix:
        target:
          - {
              target: x86_64-unknown-linux-gnu,
              description: Build & Test Native,
              web: false,
            }
          - {
              target: wasm32-unknown-unknown,
              description: Build Web,
              web: true,
            }
        rust:
          - { version: stable }
        include:
          - rust: {
              version: nightly,
              description: with Atomics,
              component: --component rust-src,
              flags: "-Ctarget-feature=+atomics,+bulk-memory",
              args: "-Zbuild-std=panic_abort,std",
            }
            target: {
              target: wasm32-unknown-unknown,
              description: Build Web,
              web: true,
            }

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: taiki-e/cache-cargo-install-action@v1
        if: matrix.target.web
        with:
          tool: wasm-bindgen-cli
          git: https://github.com/daxpedda/wasm-bindgen
          rev: b42b04bf1fabce68a883102daeba5ac16bdecb38
      - name: Install Rust
        run: |
          rustup toolchain install ${{ matrix.rust.version }} --profile minimal ${{ matrix.rust.component }} --target ${{ matrix.target.target }}
          rustup default ${{ matrix.rust.version }}
      - name: Build
        env:
          RUSTFLAGS: ${{ matrix.rust.flags }}
        run: cargo build --target ${{ matrix.target.target }} ${{ matrix.rust.args }}
      - name: Documentation
        env:
          RUSTDOCFLAGS: ${{ matrix.rust.flags }}
          RUSTFLAGS: ${{ matrix.rust.flags }}
        run: cargo doc --no-deps --target ${{ matrix.target.target }} ${{ matrix.rust.args }}
      - name: Test
        if: matrix.target.web == false
        run: cargo test --all-targets --no-fail-fast
      - name: Documentation tests
        if: matrix.target.web == false
        run: cargo test --doc --no-fail-fast

  test-browsers:
    name: ${{ matrix.rust.pre_description }} ${{ matrix.driver.description }} ${{ matrix.rust.post_description }} ${{ matrix.cross-origin-isolation.description }}

    runs-on: ${{ matrix.driver.os }}

    timeout-minutes: 10

    strategy:
      fail-fast: false
      matrix:
        rust:
          - { version: stable, pre_description: Test }
          - { version: nightly, pre_description: Doctest }
          - {
              version: nightly,
              pre_description: Test & Doctest,
              post_description: with Atomics,
              atomics: true,
              component: --component rust-src,
              flags: "-Ctarget-feature=+atomics,+bulk-memory",
              args: "-Zbuild-std=panic_abort,std",
            }
        cross-origin-isolation:
          - { state: true }
          - {
              state: false,
              description: (no COOP+COEP),
              flags: --cfg=unsupported_spawn,
            }
        driver:
          - {
              os: ubuntu-latest,
              description: Chrome,
              name: CHROMEDRIVER,
              value: chromedriver,
              flags: --cfg=unsupported_spawn_then_block
            }
          - {
              os: ubuntu-latest,
              description: Firefox,
              name: GECKODRIVER,
              value: geckodriver,
              flags: --cfg=unsupported_service --cfg=unsupported_shared_block
            }
          - {
              os: macos-latest,
              description: Safari,
              name: SAFARIDRIVER,
              value: safaridriver,
              flags: --cfg=unsupported_spawn_then_block --cfg=unsupported_shared_block
            }

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: taiki-e/cache-cargo-install-action@v1
        with:
          tool: wasm-bindgen-cli
          git: https://github.com/daxpedda/wasm-bindgen
          rev: b42b04bf1fabce68a883102daeba5ac16bdecb38
      - name: Install Rust
        run: |
          rustup toolchain install ${{ matrix.rust.version }} --profile minimal ${{ matrix.rust.component }} --target wasm32-unknown-unknown
          rustup default ${{ matrix.rust.version }}
      - name: Set Driver
        run: echo "${{ matrix.driver.name }}=${{ matrix.driver.value }}" >> $GITHUB_ENV
      - name: Disable Cross-Origin-Isolation
        if: matrix.cross-origin-isolation.state == false
        run: echo "WASM_BINDGEN_TEST_NO_ORIGIN_ISOLATION=1" >> $GITHUB_ENV
      - name: Test
        if: matrix.rust.version != 'nightly' || matrix.rust.atomics
        env:
          RUSTFLAGS: ${{ matrix.rust.flags }} ${{ matrix.driver.flags }} ${{ matrix.cross-origin-isolation.flags }}
        run: cargo test --all-targets --no-fail-fast --target wasm32-unknown-unknown ${{ matrix.rust.args }}
      - name: Documentation tests
        if: matrix.rust.version == 'nightly'
        env:
          RUSTFLAGS: ${{ matrix.rust.flags }} ${{ matrix.driver.flags }} ${{ matrix.cross-origin-isolation.flags }}
          RUSTDOCFLAGS: ${{ matrix.rust.flags }} ${{ matrix.driver.flags }} ${{ matrix.cross-origin-isolation.flags }}
        run: cargo +nightly test --doc --no-fail-fast --target wasm32-unknown-unknown ${{ matrix.rust.args }} -Zdoctest-xcompile

  compile-test-web:
    name: Compile Tests on Web ${{ matrix.rust.description }}

    runs-on: ubuntu-latest

    timeout-minutes: 10

    strategy:
      fail-fast: false
      matrix:
        rust:
          - { version: stable }
          - {
              version: nightly,
              description: with Atomics,
              component: --component rust-src,
              flags: "-Ctarget-feature=+atomics,+bulk-memory",
              args: "-Zbuild-std=panic_abort,std",
            }

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Rust
        run: |
          rustup toolchain install ${{ matrix.rust.version }} --profile minimal ${{ matrix.rust.component }} --target wasm32-unknown-unknown
          rustup default ${{ matrix.rust.version }}
      - name: Test
        env:
          UI_TEST_TARGET: wasm32-unknown-unknown
          UI_TEST_RUSTFLAGS: ${{ matrix.rust.flags }}
          UI_TEST_ARGS: ${{ matrix.rust.args }}
        run: cargo test --test compile_test

  minimal-versions:
    name: Minimal Versions on ${{ matrix.target.description }} (${{ matrix.rust.description }})

    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: minimal-versions

    strategy:
      fail-fast: false
      matrix:
        rust:
          - { version: "1.70", description: MSRV }
          - { version: stable, description: Stable }
        target:
          - { target: x86_64-unknown-linux-gnu, description: Native }
          - { target: wasm32-unknown-unknown, description: Web }
        include:
          - rust: {
              version: nightly,
              description: Nightly (Atomics),
              component: --component rust-src,
              flags: "-Ctarget-feature=+atomics,+bulk-memory",
              args: "-Zbuild-std=panic_abort,std",
            }
            target: { target: wasm32-unknown-unknown, description: Web }

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Rust
        run: |
          rustup toolchain install ${{ matrix.rust.version }} --profile minimal ${{ matrix.rust.component }} --target ${{ matrix.target.target }}
          rustup default ${{ matrix.rust.version }}
      - name: Install Rust nightly
        run: rustup toolchain install nightly --profile minimal
      - name: Update to minimal versions
        run: cargo +nightly update -Zminimal-versions
      - name: Fix nightly
        if: matrix.rust.version == 'nightly'
        run: cargo update -p proc-macro2 --precise 1.0.60
      - name: Build
        env:
          RUSTFLAGS: ${{ matrix.rust.flags }}
        run: cargo build --target ${{ matrix.target.target }} ${{ matrix.rust.args }}
